paths:
  '/users/{id}/accessTokens/{fk}':
    get:
      tags:
        - user
      summary: Find a related item by id for accessTokens.
      operationId: user.prototype.__findById__accessTokens
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - user
      summary: Delete a related item by id for accessTokens.
      operationId: user.prototype.__destroyById__accessTokens
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - user
      summary: Update a related item by id for accessTokens.
      operationId: user.prototype.__updateById__accessTokens
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/users/{id}/accessTokens':
    get:
      tags:
        - user
      summary: Queries accessTokens of user.
      operationId: user.prototype.__get__accessTokens
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - user
      summary: Creates a new instance in accessTokens of this model.
      operationId: user.prototype.__create__accessTokens
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - user
      summary: Deletes all accessTokens of this model.
      operationId: user.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/users/{id}/accessTokens/count':
    get:
      tags:
        - user
      summary: Counts accessTokens of user.
      operationId: user.prototype.__count__accessTokens
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /users:
    post:
      tags:
        - user
      summary: Create a new instance of the model and persist it into the data source.
      operationId: user.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    patch:
      tags:
        - user
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: user.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    put:
      tags:
        - user
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: user.replaceOrCreate__put_users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    get:
      tags:
        - user
      summary: Find all instances of the model matched by filter from the data source.
      operationId: user.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/user'
      deprecated: false
  /users/replaceOrCreate:
    post:
      tags:
        - user
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: user.replaceOrCreate__post_users_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  /users/upsertWithWhere:
    post:
      tags:
        - user
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: user.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  '/users/{id}/exists':
    get:
      tags:
        - user
      summary: Check whether a model instance exists in the data source.
      operationId: 'user.exists__get_users_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/users/{id}':
    head:
      tags:
        - user
      summary: Check whether a model instance exists in the data source.
      operationId: 'user.exists__head_users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - user
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: user.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    put:
      tags:
        - user
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'user.replaceById__put_users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
    delete:
      tags:
        - user
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: user.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - user
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: user.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  '/users/{id}/replace':
    post:
      tags:
        - user
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'user.replaceById__post_users_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  /users/findOne:
    get:
      tags:
        - user
      summary: Find first instance of the model matched by filter from the data source.
      operationId: user.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/user'
      deprecated: false
  /users/update:
    post:
      tags:
        - user
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: user.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /users/count:
    get:
      tags:
        - user
      summary: Count instances of the model matched by where from the data source.
      operationId: user.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /users/login:
    post:
      tags:
        - user
      summary: Login a user with username/email and password.
      operationId: user.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:

                - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)

            type: object
      deprecated: false
  /users/logout:
    post:
      tags:
        - user
      summary: Logout a user with access token.
      operationId: user.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/users/{id}/verify':
    post:
      tags:
        - user
      summary: Trigger user's identity verification with configured verifyOptions
      operationId: user.prototype.verify
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /users/confirm:
    get:
      tags:
        - user
      summary: Confirm a user registration with identity verification token.
      operationId: user.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /users/reset:
    post:
      tags:
        - user
      summary: Reset password for a user with email.
      operationId: user.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /users/change-password:
    post:
      tags:
        - user
      summary: Change a user's password.
      operationId: user.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /users/reset-password:
    post:
      tags:
        - user
      summary: Reset user's password via a password-reset token.
      operationId: user.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /users/updateRole:
    post:
      tags:
        - user
      summary: update a user's Role.
      operationId: user.updateRole
      parameters:
        - name: data
          in: body
          description: '{"userId":"xxxx","role":"new role"}'
          required: false
          schema:
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              data:
                type: object
      deprecated: false
  /users/deleteRole:
    post:
      tags:
        - user
      summary: delete a user's Role.
      operationId: user.deleteRole
      parameters:
        - name: data
          in: body
          description: '{"userId":"xxxx","role":" role to delete"}'
          required: false
          schema:
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              data:
                type: object
      deprecated: false
  /users/validateOTP:
    get:
      tags:
        - user
      summary: validateOTP
      operationId: user.validateOTP
      parameters:
        - name: otp
          in: query
          description: OTP from mobile/email
          required: true
          type: string
        - name: cotp
          in: query
          description: encrypted OTP
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              data:
                type: object
      deprecated: false
  /users/validateUser:
    get:
      tags:
        - user
      summary: validate User
      operationId: user.validateUser
      parameters:
        - name: val
          in: query
          description: '{val:phone number/email}'
          required: true
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              data:
                type: object
      deprecated: false
  /users/updatePassword:
    post:
      tags:
        - user
      summary: update a user's password.
      operationId: user.updatePassword
      parameters:
        - name: data
          in: body
          description: '{"userId":"xxxx","password":"new password"}'
          required: false
          schema:
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              data:
                type: object
      deprecated: false
  /users/updatePasswordWithOldPassword:
    post:
      tags:
        - user
      summary: update a user's password with Old Password.
      operationId: user.updatePasswordWithOldPassword
      parameters:
        - name: data
          in: body
          description: >-
            {"userId":"xxxx","password":"current password","oldPassword":"old
            password"}
          required: false
          schema:
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              data:
                type: object
      deprecated: false
  /users/updateUserInfoByUserId:
    post:
      tags:
        - user
      summary: update a user's info by user id.
      operationId: user.updateUserInfoByUserId
      parameters:
        - name: data
          in: body
          description: |-
            {"userId":"xxxx","user":"{
                            "firstName": "string",
                        "lastName": "string",
                        "language": "string",
                        "notification": true,
                        "email": "string"
                    }"}
          required: false
          schema:
            $ref: '#/definitions/user'
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              data:
                type: object
      deprecated: false
  '/spareParts/{id}/sparePartDetails/{fk}':
    get:
      tags:
        - sparePart
      summary: Find a related item by id for sparePartDetails.
      operationId: sparePart.prototype.__findById__sparePartDetails
      parameters:
        - name: id
          in: path
          description: sparePart id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for sparePartDetails
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePartDetails'
      deprecated: false
    delete:
      tags:
        - sparePart
      summary: Delete a related item by id for sparePartDetails.
      operationId: sparePart.prototype.__destroyById__sparePartDetails
      parameters:
        - name: id
          in: path
          description: sparePart id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for sparePartDetails
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - sparePart
      summary: Update a related item by id for sparePartDetails.
      operationId: sparePart.prototype.__updateById__sparePartDetails
      parameters:
        - name: id
          in: path
          description: sparePart id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for sparePartDetails
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/sparePartDetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePartDetails'
      deprecated: false
  '/spareParts/{id}/sparePartDetails':
    get:
      tags:
        - sparePart
      summary: Queries sparePartDetails of sparePart.
      operationId: sparePart.prototype.__get__sparePartDetails
      parameters:
        - name: id
          in: path
          description: sparePart id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/sparePartDetails'
      deprecated: false
    post:
      tags:
        - sparePart
      summary: Creates a new instance in sparePartDetails of this model.
      operationId: sparePart.prototype.__create__sparePartDetails
      parameters:
        - name: id
          in: path
          description: sparePart id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/sparePartDetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePartDetails'
      deprecated: false
    delete:
      tags:
        - sparePart
      summary: Deletes all sparePartDetails of this model.
      operationId: sparePart.prototype.__delete__sparePartDetails
      parameters:
        - name: id
          in: path
          description: sparePart id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/spareParts/{id}/sparePartDetails/count':
    get:
      tags:
        - sparePart
      summary: Counts sparePartDetails of sparePart.
      operationId: sparePart.prototype.__count__sparePartDetails
      parameters:
        - name: id
          in: path
          description: sparePart id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /spareParts:
    post:
      tags:
        - sparePart
      summary: Create a new instance of the model and persist it into the data source.
      operationId: sparePart.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sparePart'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePart'
      deprecated: false
    patch:
      tags:
        - sparePart
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: sparePart.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sparePart'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePart'
      deprecated: false
    put:
      tags:
        - sparePart
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: sparePart.replaceOrCreate__put_spareParts
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sparePart'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePart'
      deprecated: false
    get:
      tags:
        - sparePart
      summary: Find all instances of the model matched by filter from the data source.
      operationId: sparePart.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/sparePart'
      deprecated: false
  /spareParts/replaceOrCreate:
    post:
      tags:
        - sparePart
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: sparePart.replaceOrCreate__post_spareParts_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sparePart'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePart'
      deprecated: false
  /spareParts/upsertWithWhere:
    post:
      tags:
        - sparePart
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: sparePart.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/sparePart'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePart'
      deprecated: false
  '/spareParts/{id}/exists':
    get:
      tags:
        - sparePart
      summary: Check whether a model instance exists in the data source.
      operationId: 'sparePart.exists__get_spareParts_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/spareParts/{id}':
    head:
      tags:
        - sparePart
      summary: Check whether a model instance exists in the data source.
      operationId: 'sparePart.exists__head_spareParts_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - sparePart
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: sparePart.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePart'
      deprecated: false
    put:
      tags:
        - sparePart
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'sparePart.replaceById__put_spareParts_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sparePart'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePart'
      deprecated: false
    delete:
      tags:
        - sparePart
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: sparePart.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - sparePart
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: sparePart.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: sparePart id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/sparePart'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePart'
      deprecated: false
  '/spareParts/{id}/replace':
    post:
      tags:
        - sparePart
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'sparePart.replaceById__post_spareParts_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sparePart'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePart'
      deprecated: false
  /spareParts/findOne:
    get:
      tags:
        - sparePart
      summary: Find first instance of the model matched by filter from the data source.
      operationId: sparePart.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePart'
      deprecated: false
  /spareParts/update:
    post:
      tags:
        - sparePart
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: sparePart.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/sparePart'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /spareParts/count:
    get:
      tags:
        - sparePart
      summary: Count instances of the model matched by where from the data source.
      operationId: sparePart.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /spareParts/readCsv:
    post:
      tags:
        - sparePart
      operationId: sparePart.readCsv
      parameters:
        - name: flag
          in: formData
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                type: string
      deprecated: false
  /spareParts/findSparepart:
    post:
      tags:
        - sparePart
      summary: fetch Spare Parts by partNumber
      operationId: sparePart.findSparepart
      parameters:
        - name: data
          in: body
          description: '{"partNumber":"xxxx","pageNumber":1,"limit":10}'
          required: false
          schema:
            $ref: '#/definitions/sparePart'
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              data:
                type: object
      deprecated: false
  /spareParts/findSparepartByYearModelMake:
    post:
      tags:
        - sparePart
      summary: fetch Spare Parts by Year Model Make partNumber
      operationId: sparePart.findSparepartByYearModelMake
      parameters:
        - name: data
          in: body
          description: |-
            {"params":{"Year":"2006","Model":"Explorer",
                        "Make":"Ford","partNumber":"8"},
                        "pageNumber":1,"limit":10}
          required: false
          schema:
            $ref: '#/definitions/sparePart'
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              data:
                type: object
      deprecated: false
  /spareParts/findSparepartDetailsById:
    post:
      tags:
        - sparePart
      summary: fetch Spare Part with details by id
      operationId: sparePart.findSparepartDetailsById
      parameters:
        - name: data
          in: body
          description: '{"_id":"xxx"}'
          required: false
          schema:
            $ref: '#/definitions/sparePart'
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              data:
                type: object
      deprecated: false
  /spareParts/findDropDownValues:
    post:
      tags:
        - sparePart
      summary: fetch Model/Year/Make
      operationId: sparePart.findDropDownValues
      parameters:
        - name: data
          in: body
          description: '{"felid":"Model","input":{"Year":"2001","Make":"Nissan"}}'
          required: false
          schema:
            $ref: '#/definitions/sparePart'
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              data:
                type: object
      deprecated: false
  /productGuides:
    post:
      tags:
        - productGuide
      summary: Create a new instance of the model and persist it into the data source.
      operationId: productGuide.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/productGuide'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/productGuide'
      deprecated: false
    patch:
      tags:
        - productGuide
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: productGuide.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/productGuide'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/productGuide'
      deprecated: false
    put:
      tags:
        - productGuide
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: productGuide.replaceOrCreate__put_productGuides
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/productGuide'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/productGuide'
      deprecated: false
    get:
      tags:
        - productGuide
      summary: Find all instances of the model matched by filter from the data source.
      operationId: productGuide.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/productGuide'
      deprecated: false
  /productGuides/replaceOrCreate:
    post:
      tags:
        - productGuide
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: productGuide.replaceOrCreate__post_productGuides_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/productGuide'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/productGuide'
      deprecated: false
  /productGuides/upsertWithWhere:
    post:
      tags:
        - productGuide
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: productGuide.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/productGuide'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/productGuide'
      deprecated: false
  '/productGuides/{id}/exists':
    get:
      tags:
        - productGuide
      summary: Check whether a model instance exists in the data source.
      operationId: 'productGuide.exists__get_productGuides_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/productGuides/{id}':
    head:
      tags:
        - productGuide
      summary: Check whether a model instance exists in the data source.
      operationId: 'productGuide.exists__head_productGuides_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - productGuide
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: productGuide.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/productGuide'
      deprecated: false
    put:
      tags:
        - productGuide
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'productGuide.replaceById__put_productGuides_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/productGuide'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/productGuide'
      deprecated: false
    delete:
      tags:
        - productGuide
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: productGuide.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - productGuide
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: productGuide.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: productGuide id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/productGuide'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/productGuide'
      deprecated: false
  '/productGuides/{id}/replace':
    post:
      tags:
        - productGuide
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'productGuide.replaceById__post_productGuides_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/productGuide'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/productGuide'
      deprecated: false
  /productGuides/findOne:
    get:
      tags:
        - productGuide
      summary: Find first instance of the model matched by filter from the data source.
      operationId: productGuide.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/productGuide'
      deprecated: false
  /productGuides/update:
    post:
      tags:
        - productGuide
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: productGuide.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/productGuide'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /productGuides/count:
    get:
      tags:
        - productGuide
      summary: Count instances of the model matched by where from the data source.
      operationId: productGuide.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /productGuides/searchGuide:
    post:
      tags:
        - productGuide
      summary: search product/troubleshooting/videoHub guide
      operationId: productGuide.searchGuide
      parameters:
        - name: data
          in: body
          description: '{"title":"brake repair..","type:"productInfo/troubleshoot/videoHub"}'
          required: false
          schema:
            $ref: '#/definitions/productGuide'
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              data:
                type: object
      deprecated: false
  /faqs:
    post:
      tags:
        - faq
      summary: Create a new instance of the model and persist it into the data source.
      operationId: faq.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/faq'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/faq'
      deprecated: false
    patch:
      tags:
        - faq
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: faq.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/faq'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/faq'
      deprecated: false
    put:
      tags:
        - faq
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: faq.replaceOrCreate__put_faqs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/faq'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/faq'
      deprecated: false
    get:
      tags:
        - faq
      summary: Find all instances of the model matched by filter from the data source.
      operationId: faq.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/faq'
      deprecated: false
  /faqs/replaceOrCreate:
    post:
      tags:
        - faq
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: faq.replaceOrCreate__post_faqs_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/faq'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/faq'
      deprecated: false
  /faqs/upsertWithWhere:
    post:
      tags:
        - faq
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: faq.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/faq'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/faq'
      deprecated: false
  '/faqs/{id}/exists':
    get:
      tags:
        - faq
      summary: Check whether a model instance exists in the data source.
      operationId: 'faq.exists__get_faqs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/faqs/{id}':
    head:
      tags:
        - faq
      summary: Check whether a model instance exists in the data source.
      operationId: 'faq.exists__head_faqs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - faq
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: faq.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/faq'
      deprecated: false
    put:
      tags:
        - faq
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'faq.replaceById__put_faqs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/faq'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/faq'
      deprecated: false
    delete:
      tags:
        - faq
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: faq.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - faq
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: faq.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: faq id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/faq'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/faq'
      deprecated: false
  '/faqs/{id}/replace':
    post:
      tags:
        - faq
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'faq.replaceById__post_faqs_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/faq'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/faq'
      deprecated: false
  /faqs/findOne:
    get:
      tags:
        - faq
      summary: Find first instance of the model matched by filter from the data source.
      operationId: faq.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/faq'
      deprecated: false
  /faqs/update:
    post:
      tags:
        - faq
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: faq.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/faq'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /faqs/count:
    get:
      tags:
        - faq
      summary: Count instances of the model matched by where from the data source.
      operationId: faq.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /faqs/getFAQ:
    post:
      tags:
        - faq
      summary: FAQs
      operationId: faq.getFAQ
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              data:
                type: object
      deprecated: false
  /sparePartDetails:
    post:
      tags:
        - sparePartDetails
      summary: Create a new instance of the model and persist it into the data source.
      operationId: sparePartDetails.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sparePartDetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePartDetails'
      deprecated: false
    patch:
      tags:
        - sparePartDetails
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: sparePartDetails.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sparePartDetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePartDetails'
      deprecated: false
    put:
      tags:
        - sparePartDetails
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: sparePartDetails.replaceOrCreate__put_sparePartDetails
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sparePartDetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePartDetails'
      deprecated: false
    get:
      tags:
        - sparePartDetails
      summary: Find all instances of the model matched by filter from the data source.
      operationId: sparePartDetails.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/sparePartDetails'
      deprecated: false
  /sparePartDetails/replaceOrCreate:
    post:
      tags:
        - sparePartDetails
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: sparePartDetails.replaceOrCreate__post_sparePartDetails_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sparePartDetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePartDetails'
      deprecated: false
  /sparePartDetails/upsertWithWhere:
    post:
      tags:
        - sparePartDetails
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: sparePartDetails.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/sparePartDetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePartDetails'
      deprecated: false
  '/sparePartDetails/{id}/exists':
    get:
      tags:
        - sparePartDetails
      summary: Check whether a model instance exists in the data source.
      operationId: 'sparePartDetails.exists__get_sparePartDetails_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/sparePartDetails/{id}':
    head:
      tags:
        - sparePartDetails
      summary: Check whether a model instance exists in the data source.
      operationId: 'sparePartDetails.exists__head_sparePartDetails_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - sparePartDetails
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: sparePartDetails.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePartDetails'
      deprecated: false
    put:
      tags:
        - sparePartDetails
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'sparePartDetails.replaceById__put_sparePartDetails_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sparePartDetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePartDetails'
      deprecated: false
    delete:
      tags:
        - sparePartDetails
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: sparePartDetails.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - sparePartDetails
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: sparePartDetails.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: sparePartDetails id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/sparePartDetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePartDetails'
      deprecated: false
  '/sparePartDetails/{id}/replace':
    post:
      tags:
        - sparePartDetails
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'sparePartDetails.replaceById__post_sparePartDetails_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sparePartDetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePartDetails'
      deprecated: false
  /sparePartDetails/findOne:
    get:
      tags:
        - sparePartDetails
      summary: Find first instance of the model matched by filter from the data source.
      operationId: sparePartDetails.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePartDetails'
      deprecated: false
  /sparePartDetails/update:
    post:
      tags:
        - sparePartDetails
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: sparePartDetails.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/sparePartDetails'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /sparePartDetails/count:
    get:
      tags:
        - sparePartDetails
      summary: Count instances of the model matched by where from the data source.
      operationId: sparePartDetails.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /sparePartDetails/readCsv:
    post:
      tags:
        - sparePartDetails
      operationId: sparePartDetails.readCsv
      parameters:
        - name: flag
          in: formData
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                type: string
      deprecated: false
  /sparePartImages:
    post:
      tags:
        - sparePartImage
      summary: Create a new instance of the model and persist it into the data source.
      operationId: sparePartImage.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sparePartImage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePartImage'
      deprecated: false
    patch:
      tags:
        - sparePartImage
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: sparePartImage.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sparePartImage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePartImage'
      deprecated: false
    put:
      tags:
        - sparePartImage
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: sparePartImage.replaceOrCreate__put_sparePartImages
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sparePartImage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePartImage'
      deprecated: false
    get:
      tags:
        - sparePartImage
      summary: Find all instances of the model matched by filter from the data source.
      operationId: sparePartImage.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/sparePartImage'
      deprecated: false
  /sparePartImages/replaceOrCreate:
    post:
      tags:
        - sparePartImage
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: sparePartImage.replaceOrCreate__post_sparePartImages_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sparePartImage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePartImage'
      deprecated: false
  /sparePartImages/upsertWithWhere:
    post:
      tags:
        - sparePartImage
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: sparePartImage.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/sparePartImage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePartImage'
      deprecated: false
  '/sparePartImages/{id}/exists':
    get:
      tags:
        - sparePartImage
      summary: Check whether a model instance exists in the data source.
      operationId: 'sparePartImage.exists__get_sparePartImages_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/sparePartImages/{id}':
    head:
      tags:
        - sparePartImage
      summary: Check whether a model instance exists in the data source.
      operationId: 'sparePartImage.exists__head_sparePartImages_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - sparePartImage
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: sparePartImage.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePartImage'
      deprecated: false
    put:
      tags:
        - sparePartImage
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'sparePartImage.replaceById__put_sparePartImages_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sparePartImage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePartImage'
      deprecated: false
    delete:
      tags:
        - sparePartImage
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: sparePartImage.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - sparePartImage
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: sparePartImage.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: sparePartImage id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/sparePartImage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePartImage'
      deprecated: false
  '/sparePartImages/{id}/replace':
    post:
      tags:
        - sparePartImage
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'sparePartImage.replaceById__post_sparePartImages_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sparePartImage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePartImage'
      deprecated: false
  /sparePartImages/findOne:
    get:
      tags:
        - sparePartImage
      summary: Find first instance of the model matched by filter from the data source.
      operationId: sparePartImage.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sparePartImage'
      deprecated: false
  /sparePartImages/update:
    post:
      tags:
        - sparePartImage
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: sparePartImage.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/sparePartImage'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /sparePartImages/count:
    get:
      tags:
        - sparePartImage
      summary: Count instances of the model matched by where from the data source.
      operationId: sparePartImage.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /sparePartImages/readCsv:
    post:
      tags:
        - sparePartImage
      operationId: sparePartImage.readCsv
      parameters:
        - name: flag
          in: formData
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                type: string
      deprecated: false
  /sliderImages:
    post:
      tags:
        - sliderImages
      summary: Create a new instance of the model and persist it into the data source.
      operationId: sliderImages.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sliderImages'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sliderImages'
      deprecated: false
    patch:
      tags:
        - sliderImages
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: sliderImages.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sliderImages'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sliderImages'
      deprecated: false
    put:
      tags:
        - sliderImages
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: sliderImages.replaceOrCreate__put_sliderImages
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sliderImages'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sliderImages'
      deprecated: false
    get:
      tags:
        - sliderImages
      summary: Find all instances of the model matched by filter from the data source.
      operationId: sliderImages.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/sliderImages'
      deprecated: false
  /sliderImages/replaceOrCreate:
    post:
      tags:
        - sliderImages
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: sliderImages.replaceOrCreate__post_sliderImages_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sliderImages'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sliderImages'
      deprecated: false
  /sliderImages/upsertWithWhere:
    post:
      tags:
        - sliderImages
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: sliderImages.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/sliderImages'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sliderImages'
      deprecated: false
  '/sliderImages/{id}/exists':
    get:
      tags:
        - sliderImages
      summary: Check whether a model instance exists in the data source.
      operationId: 'sliderImages.exists__get_sliderImages_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/sliderImages/{id}':
    head:
      tags:
        - sliderImages
      summary: Check whether a model instance exists in the data source.
      operationId: 'sliderImages.exists__head_sliderImages_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - sliderImages
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: sliderImages.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sliderImages'
      deprecated: false
    put:
      tags:
        - sliderImages
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'sliderImages.replaceById__put_sliderImages_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sliderImages'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sliderImages'
      deprecated: false
    delete:
      tags:
        - sliderImages
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: sliderImages.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - sliderImages
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: sliderImages.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: sliderImages id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/sliderImages'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sliderImages'
      deprecated: false
  '/sliderImages/{id}/replace':
    post:
      tags:
        - sliderImages
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'sliderImages.replaceById__post_sliderImages_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sliderImages'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sliderImages'
      deprecated: false
  /sliderImages/findOne:
    get:
      tags:
        - sliderImages
      summary: Find first instance of the model matched by filter from the data source.
      operationId: sliderImages.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sliderImages'
      deprecated: false
  /sliderImages/update:
    post:
      tags:
        - sliderImages
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: sliderImages.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/sliderImages'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /sliderImages/count:
    get:
      tags:
        - sliderImages
      summary: Count instances of the model matched by where from the data source.
      operationId: sliderImages.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /sliderImages/sliderImagesArray:
    post:
      tags:
        - sliderImages
      operationId: sliderImages.sliderImagesArray
      parameters:
        - name: data
          in: body
          description: '{"type":"news/general"}'
          required: false
          schema:
            $ref: '#/definitions/sliderImages'
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              images:
                type: array
                items:
                  type: object
      deprecated: false
  /techSupports:
    post:
      tags:
        - techSupport
      summary: Create a new instance of the model and persist it into the data source.
      operationId: techSupport.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/techSupport'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/techSupport'
      deprecated: false
    patch:
      tags:
        - techSupport
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: techSupport.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/techSupport'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/techSupport'
      deprecated: false
    put:
      tags:
        - techSupport
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: techSupport.replaceOrCreate__put_techSupports
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/techSupport'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/techSupport'
      deprecated: false
    get:
      tags:
        - techSupport
      summary: Find all instances of the model matched by filter from the data source.
      operationId: techSupport.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/techSupport'
      deprecated: false
  /techSupports/replaceOrCreate:
    post:
      tags:
        - techSupport
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: techSupport.replaceOrCreate__post_techSupports_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/techSupport'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/techSupport'
      deprecated: false
  /techSupports/upsertWithWhere:
    post:
      tags:
        - techSupport
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: techSupport.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/techSupport'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/techSupport'
      deprecated: false
  '/techSupports/{id}/exists':
    get:
      tags:
        - techSupport
      summary: Check whether a model instance exists in the data source.
      operationId: 'techSupport.exists__get_techSupports_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/techSupports/{id}':
    head:
      tags:
        - techSupport
      summary: Check whether a model instance exists in the data source.
      operationId: 'techSupport.exists__head_techSupports_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - techSupport
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: techSupport.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/techSupport'
      deprecated: false
    put:
      tags:
        - techSupport
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'techSupport.replaceById__put_techSupports_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/techSupport'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/techSupport'
      deprecated: false
    delete:
      tags:
        - techSupport
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: techSupport.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - techSupport
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: techSupport.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: techSupport id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/techSupport'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/techSupport'
      deprecated: false
  '/techSupports/{id}/replace':
    post:
      tags:
        - techSupport
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'techSupport.replaceById__post_techSupports_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/techSupport'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/techSupport'
      deprecated: false
  /techSupports/findOne:
    get:
      tags:
        - techSupport
      summary: Find first instance of the model matched by filter from the data source.
      operationId: techSupport.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/techSupport'
      deprecated: false
  /techSupports/update:
    post:
      tags:
        - techSupport
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: techSupport.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/techSupport'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /techSupports/count:
    get:
      tags:
        - techSupport
      summary: Count instances of the model matched by where from the data source.
      operationId: techSupport.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /abouts:
    post:
      tags:
        - about
      summary: Create a new instance of the model and persist it into the data source.
      operationId: about.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/about'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/about'
      deprecated: false
    patch:
      tags:
        - about
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: about.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/about'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/about'
      deprecated: false
    put:
      tags:
        - about
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: about.replaceOrCreate__put_abouts
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/about'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/about'
      deprecated: false
    get:
      tags:
        - about
      summary: Find all instances of the model matched by filter from the data source.
      operationId: about.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/about'
      deprecated: false
  /abouts/replaceOrCreate:
    post:
      tags:
        - about
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: about.replaceOrCreate__post_abouts_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/about'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/about'
      deprecated: false
  /abouts/upsertWithWhere:
    post:
      tags:
        - about
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: about.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/about'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/about'
      deprecated: false
  '/abouts/{id}/exists':
    get:
      tags:
        - about
      summary: Check whether a model instance exists in the data source.
      operationId: 'about.exists__get_abouts_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/abouts/{id}':
    head:
      tags:
        - about
      summary: Check whether a model instance exists in the data source.
      operationId: 'about.exists__head_abouts_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - about
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: about.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/about'
      deprecated: false
    put:
      tags:
        - about
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'about.replaceById__put_abouts_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/about'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/about'
      deprecated: false
    delete:
      tags:
        - about
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: about.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - about
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: about.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: about id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/about'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/about'
      deprecated: false
  '/abouts/{id}/replace':
    post:
      tags:
        - about
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'about.replaceById__post_abouts_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/about'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/about'
      deprecated: false
  /abouts/findOne:
    get:
      tags:
        - about
      summary: Find first instance of the model matched by filter from the data source.
      operationId: about.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/about'
      deprecated: false
  /abouts/update:
    post:
      tags:
        - about
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: about.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/about'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /abouts/count:
    get:
      tags:
        - about
      summary: Count instances of the model matched by where from the data source.
      operationId: about.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /abouts/newSeedMongoDbFromSql:
    post:
      tags:
        - about
      summary: 'seed mongodb from msSql '
      operationId: about.newSeedMongoDbFromSql
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              data:
                type: object
      deprecated: false
  /abouts/seedMongoDbFromSql:
    post:
      tags:
        - about
      summary: 'seed mongodb from msSql '
      operationId: about.seedMongoDbFromSql
      parameters:
        - name: data
          in: body
          description: |-
            {"fromTable":"faq","toTable":"faq",
                        "pid":"pid/_id/id","batchSize":1000}
          required: false
          schema:
            $ref: '#/definitions/about'
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              data:
                type: object
      deprecated: false
  /breakingNews:
    post:
      tags:
        - breakingNews
      summary: Create a new instance of the model and persist it into the data source.
      operationId: breakingNews.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/breakingNews'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/breakingNews'
      deprecated: false
    patch:
      tags:
        - breakingNews
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: breakingNews.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/breakingNews'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/breakingNews'
      deprecated: false
    put:
      tags:
        - breakingNews
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: breakingNews.replaceOrCreate__put_breakingNews
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/breakingNews'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/breakingNews'
      deprecated: false
    get:
      tags:
        - breakingNews
      summary: Find all instances of the model matched by filter from the data source.
      operationId: breakingNews.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/breakingNews'
      deprecated: false
  /breakingNews/replaceOrCreate:
    post:
      tags:
        - breakingNews
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: breakingNews.replaceOrCreate__post_breakingNews_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/breakingNews'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/breakingNews'
      deprecated: false
  /breakingNews/upsertWithWhere:
    post:
      tags:
        - breakingNews
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: breakingNews.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/breakingNews'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/breakingNews'
      deprecated: false
  '/breakingNews/{id}/exists':
    get:
      tags:
        - breakingNews
      summary: Check whether a model instance exists in the data source.
      operationId: 'breakingNews.exists__get_breakingNews_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/breakingNews/{id}':
    head:
      tags:
        - breakingNews
      summary: Check whether a model instance exists in the data source.
      operationId: 'breakingNews.exists__head_breakingNews_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - breakingNews
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: breakingNews.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/breakingNews'
      deprecated: false
    put:
      tags:
        - breakingNews
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'breakingNews.replaceById__put_breakingNews_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/breakingNews'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/breakingNews'
      deprecated: false
    delete:
      tags:
        - breakingNews
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: breakingNews.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - breakingNews
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: breakingNews.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: breakingNews id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/breakingNews'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/breakingNews'
      deprecated: false
  '/breakingNews/{id}/replace':
    post:
      tags:
        - breakingNews
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'breakingNews.replaceById__post_breakingNews_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/breakingNews'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/breakingNews'
      deprecated: false
  /breakingNews/findOne:
    get:
      tags:
        - breakingNews
      summary: Find first instance of the model matched by filter from the data source.
      operationId: breakingNews.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/breakingNews'
      deprecated: false
  /breakingNews/update:
    post:
      tags:
        - breakingNews
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: breakingNews.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/breakingNews'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /breakingNews/count:
    get:
      tags:
        - breakingNews
      summary: Count instances of the model matched by where from the data source.
      operationId: breakingNews.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /breakingNews/searchNews:
    post:
      tags:
        - breakingNews
      summary: 'search news by catagories '
      operationId: breakingNews.searchNews
      parameters:
        - name: data
          in: body
          description: '{"titletext":"brake repair..","category":"category"}'
          required: false
          schema:
            $ref: '#/definitions/breakingNews'
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              data:
                type: object
      deprecated: false
  /breakingNews/findDropDownValues:
    post:
      tags:
        - breakingNews
      summary: fetch categories
      operationId: breakingNews.findDropDownValues
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              data:
                type: object
      deprecated: false
  /videohubs:
    post:
      tags:
        - videohub
      summary: Create a new instance of the model and persist it into the data source.
      operationId: videohub.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/videohub'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/videohub'
      deprecated: false
    patch:
      tags:
        - videohub
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: videohub.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/videohub'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/videohub'
      deprecated: false
    put:
      tags:
        - videohub
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: videohub.replaceOrCreate__put_videohubs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/videohub'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/videohub'
      deprecated: false
    get:
      tags:
        - videohub
      summary: Find all instances of the model matched by filter from the data source.
      operationId: videohub.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/videohub'
      deprecated: false
  /videohubs/replaceOrCreate:
    post:
      tags:
        - videohub
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: videohub.replaceOrCreate__post_videohubs_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/videohub'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/videohub'
      deprecated: false
  /videohubs/upsertWithWhere:
    post:
      tags:
        - videohub
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: videohub.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/videohub'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/videohub'
      deprecated: false
  '/videohubs/{id}/exists':
    get:
      tags:
        - videohub
      summary: Check whether a model instance exists in the data source.
      operationId: 'videohub.exists__get_videohubs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/videohubs/{id}':
    head:
      tags:
        - videohub
      summary: Check whether a model instance exists in the data source.
      operationId: 'videohub.exists__head_videohubs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - videohub
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: videohub.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/videohub'
      deprecated: false
    put:
      tags:
        - videohub
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'videohub.replaceById__put_videohubs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/videohub'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/videohub'
      deprecated: false
    delete:
      tags:
        - videohub
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: videohub.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - videohub
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: videohub.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: videohub id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/videohub'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/videohub'
      deprecated: false
  '/videohubs/{id}/replace':
    post:
      tags:
        - videohub
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'videohub.replaceById__post_videohubs_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/videohub'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/videohub'
      deprecated: false
  /videohubs/findOne:
    get:
      tags:
        - videohub
      summary: Find first instance of the model matched by filter from the data source.
      operationId: videohub.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/videohub'
      deprecated: false
  /videohubs/update:
    post:
      tags:
        - videohub
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: videohub.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/videohub'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /videohubs/count:
    get:
      tags:
        - videohub
      summary: Count instances of the model matched by where from the data source.
      operationId: videohub.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /videohubs/searchVideos:
    post:
      tags:
        - videohub
      summary: 'search videos by title '
      operationId: videohub.searchVideos
      parameters:
        - name: data
          in: body
          description: '{"title":"video "}'
          required: false
          schema:
            $ref: '#/definitions/videohub'
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              data:
                type: object
      deprecated: false
  /partDescriptions:
    post:
      tags:
        - partDescription
      summary: Create a new instance of the model and persist it into the data source.
      operationId: partDescription.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/partDescription'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/partDescription'
      deprecated: false
    patch:
      tags:
        - partDescription
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: partDescription.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/partDescription'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/partDescription'
      deprecated: false
    put:
      tags:
        - partDescription
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: partDescription.replaceOrCreate__put_partDescriptions
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/partDescription'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/partDescription'
      deprecated: false
    get:
      tags:
        - partDescription
      summary: Find all instances of the model matched by filter from the data source.
      operationId: partDescription.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/partDescription'
      deprecated: false
  /partDescriptions/replaceOrCreate:
    post:
      tags:
        - partDescription
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: partDescription.replaceOrCreate__post_partDescriptions_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/partDescription'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/partDescription'
      deprecated: false
  /partDescriptions/upsertWithWhere:
    post:
      tags:
        - partDescription
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: partDescription.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/partDescription'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/partDescription'
      deprecated: false
  '/partDescriptions/{id}/exists':
    get:
      tags:
        - partDescription
      summary: Check whether a model instance exists in the data source.
      operationId: 'partDescription.exists__get_partDescriptions_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/partDescriptions/{id}':
    head:
      tags:
        - partDescription
      summary: Check whether a model instance exists in the data source.
      operationId: 'partDescription.exists__head_partDescriptions_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - partDescription
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: partDescription.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/partDescription'
      deprecated: false
    put:
      tags:
        - partDescription
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'partDescription.replaceById__put_partDescriptions_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/partDescription'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/partDescription'
      deprecated: false
    delete:
      tags:
        - partDescription
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: partDescription.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - partDescription
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: partDescription.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: partDescription id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/partDescription'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/partDescription'
      deprecated: false
  '/partDescriptions/{id}/replace':
    post:
      tags:
        - partDescription
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'partDescription.replaceById__post_partDescriptions_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/partDescription'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/partDescription'
      deprecated: false
  /partDescriptions/findOne:
    get:
      tags:
        - partDescription
      summary: Find first instance of the model matched by filter from the data source.
      operationId: partDescription.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/partDescription'
      deprecated: false
  /partDescriptions/update:
    post:
      tags:
        - partDescription
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: partDescription.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/partDescription'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /partDescriptions/count:
    get:
      tags:
        - partDescription
      summary: Count instances of the model matched by where from the data source.
      operationId: partDescription.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /partDescriptions/readCsv:
    post:
      tags:
        - partDescription
      operationId: partDescription.readCsv
      parameters:
        - name: flag
          in: formData
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                type: string
      deprecated: false
  /interchanges:
    post:
      tags:
        - interchanges
      summary: Create a new instance of the model and persist it into the data source.
      operationId: interchanges.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/interchanges'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/interchanges'
      deprecated: false
    patch:
      tags:
        - interchanges
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: interchanges.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/interchanges'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/interchanges'
      deprecated: false
    put:
      tags:
        - interchanges
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: interchanges.replaceOrCreate__put_interchanges
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/interchanges'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/interchanges'
      deprecated: false
    get:
      tags:
        - interchanges
      summary: Find all instances of the model matched by filter from the data source.
      operationId: interchanges.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/interchanges'
      deprecated: false
  /interchanges/replaceOrCreate:
    post:
      tags:
        - interchanges
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: interchanges.replaceOrCreate__post_interchanges_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/interchanges'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/interchanges'
      deprecated: false
  /interchanges/upsertWithWhere:
    post:
      tags:
        - interchanges
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: interchanges.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/interchanges'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/interchanges'
      deprecated: false
  '/interchanges/{id}/exists':
    get:
      tags:
        - interchanges
      summary: Check whether a model instance exists in the data source.
      operationId: 'interchanges.exists__get_interchanges_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/interchanges/{id}':
    head:
      tags:
        - interchanges
      summary: Check whether a model instance exists in the data source.
      operationId: 'interchanges.exists__head_interchanges_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - interchanges
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: interchanges.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/interchanges'
      deprecated: false
    put:
      tags:
        - interchanges
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'interchanges.replaceById__put_interchanges_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/interchanges'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/interchanges'
      deprecated: false
    delete:
      tags:
        - interchanges
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: interchanges.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - interchanges
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: interchanges.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: interchanges id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/interchanges'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/interchanges'
      deprecated: false
  '/interchanges/{id}/replace':
    post:
      tags:
        - interchanges
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'interchanges.replaceById__post_interchanges_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/interchanges'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/interchanges'
      deprecated: false
  /interchanges/findOne:
    get:
      tags:
        - interchanges
      summary: Find first instance of the model matched by filter from the data source.
      operationId: interchanges.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/interchanges'
      deprecated: false
  /interchanges/update:
    post:
      tags:
        - interchanges
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: interchanges.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/interchanges'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /interchanges/count:
    get:
      tags:
        - interchanges
      summary: Count instances of the model matched by where from the data source.
      operationId: interchanges.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /interchanges/readCsv:
    post:
      tags:
        - interchanges
      operationId: interchanges.readCsv
      parameters:
        - name: flag
          in: formData
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              result:
                type: string
      deprecated: false
  /storeLocations:
    post:
      tags:
        - storeLocation
      summary: Create a new instance of the model and persist it into the data source.
      operationId: storeLocation.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/storeLocation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/storeLocation'
      deprecated: false
    patch:
      tags:
        - storeLocation
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: storeLocation.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/storeLocation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/storeLocation'
      deprecated: false
    put:
      tags:
        - storeLocation
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: storeLocation.replaceOrCreate__put_storeLocations
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/storeLocation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/storeLocation'
      deprecated: false
    get:
      tags:
        - storeLocation
      summary: Find all instances of the model matched by filter from the data source.
      operationId: storeLocation.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/storeLocation'
      deprecated: false
  /storeLocations/replaceOrCreate:
    post:
      tags:
        - storeLocation
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: storeLocation.replaceOrCreate__post_storeLocations_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/storeLocation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/storeLocation'
      deprecated: false
  /storeLocations/upsertWithWhere:
    post:
      tags:
        - storeLocation
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: storeLocation.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/storeLocation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/storeLocation'
      deprecated: false
  '/storeLocations/{id}/exists':
    get:
      tags:
        - storeLocation
      summary: Check whether a model instance exists in the data source.
      operationId: 'storeLocation.exists__get_storeLocations_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/storeLocations/{id}':
    head:
      tags:
        - storeLocation
      summary: Check whether a model instance exists in the data source.
      operationId: 'storeLocation.exists__head_storeLocations_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - storeLocation
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: storeLocation.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/storeLocation'
      deprecated: false
    put:
      tags:
        - storeLocation
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'storeLocation.replaceById__put_storeLocations_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/storeLocation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/storeLocation'
      deprecated: false
    delete:
      tags:
        - storeLocation
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: storeLocation.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - storeLocation
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: storeLocation.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: storeLocation id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/storeLocation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/storeLocation'
      deprecated: false
  '/storeLocations/{id}/replace':
    post:
      tags:
        - storeLocation
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'storeLocation.replaceById__post_storeLocations_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/storeLocation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/storeLocation'
      deprecated: false
  /storeLocations/findOne:
    get:
      tags:
        - storeLocation
      summary: Find first instance of the model matched by filter from the data source.
      operationId: storeLocation.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/storeLocation'
      deprecated: false
  /storeLocations/update:
    post:
      tags:
        - storeLocation
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: storeLocation.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/storeLocation'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /storeLocations/count:
    get:
      tags:
        - storeLocation
      summary: Count instances of the model matched by where from the data source.
      operationId: storeLocation.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /locs:
    post:
      tags:
        - storeLocations
      summary: Create a new instance of the model and persist it into the data source.
      operationId: storeLocations.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/storeLocations'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/storeLocations'
      deprecated: false
    patch:
      tags:
        - storeLocations
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: storeLocations.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/storeLocations'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/storeLocations'
      deprecated: false
    put:
      tags:
        - storeLocations
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: storeLocations.replaceOrCreate__put_locs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/storeLocations'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/storeLocations'
      deprecated: false
    get:
      tags:
        - storeLocations
      summary: Find all instances of the model matched by filter from the data source.
      operationId: storeLocations.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/storeLocations'
      deprecated: false
  /locs/replaceOrCreate:
    post:
      tags:
        - storeLocations
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: storeLocations.replaceOrCreate__post_locs_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/storeLocations'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/storeLocations'
      deprecated: false
  /locs/upsertWithWhere:
    post:
      tags:
        - storeLocations
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: storeLocations.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/storeLocations'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/storeLocations'
      deprecated: false
  '/locs/{id}/exists':
    get:
      tags:
        - storeLocations
      summary: Check whether a model instance exists in the data source.
      operationId: 'storeLocations.exists__get_locs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/locs/{id}':
    head:
      tags:
        - storeLocations
      summary: Check whether a model instance exists in the data source.
      operationId: 'storeLocations.exists__head_locs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - storeLocations
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: storeLocations.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/storeLocations'
      deprecated: false
    put:
      tags:
        - storeLocations
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'storeLocations.replaceById__put_locs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/storeLocations'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/storeLocations'
      deprecated: false
    delete:
      tags:
        - storeLocations
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: storeLocations.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - storeLocations
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: storeLocations.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: storeLocations id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/storeLocations'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/storeLocations'
      deprecated: false
  '/locs/{id}/replace':
    post:
      tags:
        - storeLocations
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'storeLocations.replaceById__post_locs_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/storeLocations'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/storeLocations'
      deprecated: false
  /locs/findOne:
    get:
      tags:
        - storeLocations
      summary: Find first instance of the model matched by filter from the data source.
      operationId: storeLocations.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/storeLocations'
      deprecated: false
  /locs/update:
    post:
      tags:
        - storeLocations
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: storeLocations.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/storeLocations'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /locs/count:
    get:
      tags:
        - storeLocations
      summary: Count instances of the model matched by where from the data source.
      operationId: storeLocations.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  x-any:
    properties: {}
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      scopes:
        description: Array of scopes granted to this access token.
        type: array
        items:
          type: string
      created:
        type: string
        format: date-time
      userId:
        $ref: '#/definitions/ObjectID'
    required:
      - id
    additionalProperties: false
  user:
    properties:
      firstName:
        type: string
      lastName:
        type: string
      language:
        type: string
      notification:
        type: boolean
      emailVerified:
        default: false
        type: boolean
      adminApproved:
        default: true
        type: boolean
      role:
        default:
          - user
        type: array
        items:
          $ref: '#/definitions/x-any'
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - email
    additionalProperties: false
  sparePartDetails:
    properties:
      id:
        $ref: '#/definitions/ObjectID'
      Item Identifier:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  sparePart:
    properties:
      id:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  productGuide:
    properties:
      title:
        type: string
      description:
        type: string
      pdfLink:
        type: string
      type:
        type: string
      coverImageLink:
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  faq:
    properties:
      question:
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  sparePartImage:
    properties:
      id:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  sliderImages:
    properties:
      url:
        type: string
      name:
        type: string
      type:
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - url
    additionalProperties: false
  techSupport:
    properties:
      line1:
        type: string
      line2:
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  about:
    properties:
      logoUrl:
        type: string
      tagLine:
        type: string
      line1:
        type: string
      line2:
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  breakingNews:
    properties:
      url:
        type: string
      titletext:
        type: string
      category:
        type: string
      coverImageLink:
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - url
      - titletext
      - category
      - coverImageLink
    additionalProperties: false
  videohub:
    properties:
      id:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  partDescription:
    properties:
      id:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  interchanges:
    properties:
      id:
        $ref: '#/definitions/ObjectID'
    additionalProperties: false
  storeLocation:
    properties:
      StoreName:
        type: string
      Latitude:
        type: string
      Longitude:
        type: string
      Zipcode:
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - StoreName
      - Latitude
      - Longitude
      - Zipcode
    additionalProperties: false
  storeLocations:
    properties:
      name:
        type: string
      longitude:
        type: string
      latitude:
        type: string
      zipcode:
        type: string
      id:
        $ref: '#/definitions/ObjectID'
    required:
      - name
      - longitude
      - latitude
      - zipcode
    additionalProperties: false
  ObjectID:
    type: string
    pattern: '^[a-fA-F\d]{24}$'
basePath: /api
swagger: '2.0'
info:
  x-ibm-name: sensend_backend
  version: 1.0.0
  title: sensend_backend
schemes:
  - https
host: $(catalog.host)
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
